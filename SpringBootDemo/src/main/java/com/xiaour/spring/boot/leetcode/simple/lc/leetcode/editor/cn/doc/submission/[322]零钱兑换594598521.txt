class Solution {
    public int coinChange(int[] coins, int amount) {
        memo = new int[amount + 1];
        Arrays.fill(memo, -666);
        return dp(coins, amount);
    }
    int[] memo;

    // 广度优先算法
    public int dp(int[] coins, Integer amount) {
        if (amount == 0) {
            return 0;
        }
        if (amount < 0) {
            return -1;
        }
        if (memo[amount] != -666) {
            return memo[amount];
        }
        int step = Integer.MAX_VALUE;
        for (int i = 0; i < coins.length; i++) {
            int nextVal = dp(coins, amount - coins[i]);
            if (nextVal < 0) {
                continue;
            }
            step = Math.min(1 + nextVal, step);
        }
        Integer res = step == Integer.MAX_VALUE ? -1 : step;
        memo[amount] = res;
        return res;
    }
}
//runtime:36 ms
//memory:44.9 MB
