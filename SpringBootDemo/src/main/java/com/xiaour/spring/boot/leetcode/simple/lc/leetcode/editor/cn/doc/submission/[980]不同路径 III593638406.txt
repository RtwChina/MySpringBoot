class Solution {

    int res = 0;
    boolean[][] visited;
    int visitedCount = 0;
    int totalCount = 0;

    int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

    public int uniquePathsIII(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        visited = new boolean[m][n];

        int startI = 0, startJ = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    startI = i;
                    startJ = j;
                }
                if (grid[i][j] == 1 || grid[i][j] == 0) {
                    totalCount++;
                }
            }
        }

        dfs(grid, startI, startJ);

        return res;
    }

    // DFS 算法框架
    void dfs(int[][] grid, int i, int j) {
        int m = grid.length, n = grid[0].length;
        // 剪枝，索引越界
        if (i < 0 || i >= m || j < 0 || j >= n) {
            return;
        }
        // 剪枝，跳过起点、障碍物、已访问的格子
        if (grid[i][j] == -1 || visited[i][j]) {
            return;
        }

        // 到达终点
        if (grid[i][j] == 2) {
            if (visitedCount == totalCount) {
                res++;
            }
            return;
        }

        visited[i][j] = true;
        visitedCount++;

        for (int[] dir : dirs) {
            dfs(grid, i + dir[0], j + dir[1]);
        }

        visited[i][j] = false;
        visitedCount--;
    }
}
//runtime:0 ms
//memory:40 MB
